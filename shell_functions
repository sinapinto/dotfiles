#!/bin/bash

xd() {
    if [ $# -eq 0 ]; then
        xrdb -I$HOME -merge $HOME/.Xresources
    else
        xrdb -override $HOME/$1
    fi

}

lf() {
   if [ $# -gt 0 ]; then
      ls -t $1 | head -n6 
   else
      ls -t  | head -n6
   fi
}

# node(){
#     [ -e .env ] && env $(cat .env) /usr/bin/node "$@" || /usr/bin/node "$@"
# }

largepkgs() { pacman -Qi | awk '/^Name/ {pkg=$3} /Size/ {print $4$5,pkg}' | grep MiB | sort -n }
t(){ env TERM=screen-256color-it tmux attach || env TERM=screen-256color-it tmux new }
mu () { mupdf "$@" & disown }
mpv() {
    if [ $1 = '-s' ]; then
        /usr/bin/mpv --fs --shuffle "$2" &>/dev/null & disown
    else
        /usr/bin/mpv --fs "$1" &>/dev/null & disown
    fi
}

rec() {
    ffmpeg -f x11grab -s 1366x768 -an -r 16 -loglevel quiet -i :0.0 -b:v 5M -y "$@"
}

man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[01;31m")  \
        LESS_TERMCAP_md=$(printf "\e[00;33m")  \
        LESS_TERMCAP_us=$(printf "\e[01;31m")  \
        LESS_TERMCAP_me=$(printf "\e[0m")      \
        LESS_TERMCAP_se=$(printf "\e[0m")      \
        LESS_TERMCAP_ue=$(printf "\e[0m")      \
        man "$@"
}

cd() {
    if [ -n "$1" ]; then
        [ -d "$1" ] && { builtin cd "$1"; ls; } || builtin cd "$(dirname "$1")"
    else
        cd ~
    fi
}

up() {
    if [ -z $1 ]; then
        cd ..
        return 0
    fi
    local cmd='../'
    for (( i=1; i<$1; i++)); do
       cmd=${cmd}../
    done
    cd $cmd
}

cpf() {
   cp "$@" && cd "$_";
}

mvf() {
   mv "$@" && cd "$_";
}

mkdirf() {
   mkdir -p "$@" && cd "$_";
}

d(){
    case $1 in
        i) dtach -A /tmp/irssi.dtach irssi ;;
        r) dtach -A /tmp/rtorrent.dtach rtorrent ;;
        z) dtach -A /tmp/zsh.dtach zsh ;;
        *) dtach -A /tmp/$1.dtach $1 ;;
    esac
}

touchpad(){
    local deviceid=$(xinput | grep TouchPad | cut -d "=" -f2| cut -f1)
    [ -z $deviceid ] && return 1
    val=$(xinput list-props $deviceid | grep able | tail -c 2)
    [ $val -eq 1 ] && xinput --disable $deviceid \
                   || xinput --enable $deviceid
}

# asdf(){
#     local file="$HOME/.playlist"
#     [ -f $file ] || return 1
#     [ -f "${file}.tmp" ] && rm -f "${file}.tmp" || echo "no temp file found"
#     shuf -n $(wc -l $file | cut -d " " -f1) $file > "${file}.tmp"
#     mpv --playlist="${file}.tmp"
# }

swap(){
    mv $1 tmp.$1
    mv $2 $1
    mv tmp.$1 $2
}

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2) tar xvjf $1;;
            *.tar.gz) tar xvzf $1;;
            *.bz2) bunzip2 $1;;
            *.gz) gunzip $1;;
            *.tar) tar xvf $1;;
            *.tbz2) tar xvjf $1;;
            *.tgz) tar xvzf $1;;
            *.zip) unzip $1;;
            *.Z) uncompress $1;;
            *) echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

soneeded() {
   readelf -d $1 | awk '/NEEDED/ {gsub(/[\[\]]/, "", $5); print $5}'
}

elfcompress() {
   [[ -n "$@" ]] || {
      echo "usage : elfcompress [binary]"
      return
   }

   cp "$@" /tmp/compress.temp
   strip -s -R .comment -R .gnu.version /tmp/compress.temp

   gzip -c /tmp/compress.temp > /tmp/compress.gz
   echo 'a=/tmp/I;tail -n+2 $0|zcat>$a;chmod +x $a;$a;rm $a;exit' >> /tmp/unpack.header

   cat /tmp/unpack.header /tmp/compress.gz > "$@.packed"
   chmod +x "$@.packed"

   rm /tmp/compress.temp
   rm /tmp/compress.gz
   rm /tmp/unpack.header
}

c() { noglob echo $(( $* )) }
